# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.core.validators
from django.conf import settings
import freegeek.models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SchemaInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'schema_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SchemaMigration',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('version', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'schema_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'actions',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('start_time', models.DateTimeField(verbose_name='start_time')),
                ('end_time', models.DateTimeField(verbose_name='end_time')),
                ('filled', models.BooleanField(verbose_name='filled')),
                ('proficiency', models.CharField(max_length=40, default='L1', choices=[('L1', 'Level 1'), ('L2', 'Level 2'), ('L3', 'Level 3')])),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('attendance_type_id', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('call_status_type_id', models.IntegerField(blank=True, null=True)),
                ('closed', models.BooleanField()),
                ('lock_version', models.IntegerField()),
            ],
            options={
                'db_table': 'assignments',
            },
        ),
        migrations.CreateModel(
            name='AttendanceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('cancelled', models.NullBooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'attendance_types',
            },
        ),
        migrations.CreateModel(
            name='BuilderTask',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('action_id', models.IntegerField()),
                ('contact_id', models.IntegerField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'builder_tasks',
            },
        ),
        migrations.CreateModel(
            name='CallStatusType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'call_status_types',
            },
        ),
        migrations.CreateModel(
            name='CommunityServiceType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('hours_multiplier', models.FloatField()),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'community_service_types',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('is_organization', models.NullBooleanField()),
                ('sort_name', models.CharField(max_length=100, blank=True, null=True)),
                ('first_name', models.CharField(max_length=25, blank=True, null=True)),
                ('middle_name', models.CharField(max_length=25, blank=True, null=True)),
                ('surname', models.CharField(max_length=50, blank=True, null=True)),
                ('organization', models.CharField(max_length=100, blank=True, null=True)),
                ('extra_address', models.CharField(max_length=52, blank=True, null=True)),
                ('address', models.CharField(max_length=52, blank=True, null=True)),
                ('city', models.CharField(max_length=30, blank=True, null=True)),
                ('state_or_province', models.CharField(max_length=15, blank=True, null=True)),
                ('postal_code', models.CharField(max_length=25, blank=True, null=True)),
                ('country', models.CharField(max_length=100, blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('next_milestone', models.IntegerField(blank=True, null=True)),
                ('addr_certified', models.BooleanField()),
                ('contract_id', models.IntegerField()),
                ('fully_covered', models.NullBooleanField()),
                ('birthday', models.DateField(blank=True, null=True)),
                ('volunteer_intern_title', models.CharField(max_length=255, blank=True, null=True)),
                ('next_monthly_milestone', models.IntegerField(blank=True, null=True)),
                ('exported_to_sf', models.DateTimeField(blank=True, null=True)),
                ('household', models.IntegerField(blank=True, null=True)),
                ('addr_rejected', models.NullBooleanField()),
            ],
            options={
                'db_table': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='ContactDuplicate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField()),
                ('dup_check', models.TextField()),
            ],
            options={
                'db_table': 'contact_duplicates',
            },
        ),
        migrations.CreateModel(
            name='ContactMethod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_method_type_id', models.IntegerField()),
                ('value', models.CharField(max_length=100)),
                ('ok', models.NullBooleanField()),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('details', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'contact_methods',
            },
        ),
        migrations.CreateModel(
            name='ContactMethodType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'contact_method_types',
            },
        ),
        migrations.CreateModel(
            name='ContactsMailing',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField()),
                ('bounced', models.BooleanField()),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('response_amount_cents', models.IntegerField(blank=True, null=True)),
                ('response_note', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'contacts_mailings',
            },
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('for_who', models.CharField(max_length=3, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('instantiable', models.BooleanField()),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'contact_types',
            },
        ),
        migrations.CreateModel(
            name='ContactTypesContact',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('contact_id', models.IntegerField()),
                ('contact_type_id', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'contact_types_contacts',
            },
        ),
        migrations.CreateModel(
            name='ContactVolunteerTaskTypeCount',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('volunteer_task_type_id', models.IntegerField(blank=True, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'contact_volunteer_task_type_counts',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('label', models.CharField(max_length=255, blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('instantiable', models.BooleanField()),
            ],
            options={
                'db_table': 'contracts',
            },
        ),
        migrations.CreateModel(
            name='Customization',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('key', models.CharField(max_length=255, blank=True, null=True)),
                ('value', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'customizations',
            },
        ),
        migrations.CreateModel(
            name='Default',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=100, blank=True, null=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'defaults',
            },
        ),
        migrations.CreateModel(
            name='DefaultAssignment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('slot_number', models.IntegerField(blank=True, null=True)),
                ('closed', models.BooleanField()),
                ('week', models.CharField(max_length=1, blank=True, null=True)),
                ('week_1_of_month', models.BooleanField()),
                ('week_2_of_month', models.BooleanField()),
                ('week_3_of_month', models.BooleanField()),
                ('week_4_of_month', models.BooleanField()),
                ('week_5_of_month', models.BooleanField()),
                ('lock_version', models.IntegerField()),
            ],
            options={
                'db_table': 'default_assignments',
            },
        ),
        migrations.CreateModel(
            name='Disbursement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('contact_id', models.IntegerField()),
                ('disbursement_type_id', models.IntegerField()),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('disbursed_at', models.DateTimeField()),
                ('needs_attention', models.BooleanField()),
                ('created_by', models.IntegerField()),
                ('updated_by', models.IntegerField(blank=True, null=True)),
                ('adjustment', models.BooleanField()),
            ],
            options={
                'db_table': 'disbursements',
            },
        ),
        migrations.CreateModel(
            name='DisbursementType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'disbursement_types',
            },
        ),
        migrations.CreateModel(
            name='DisciplinaryAction',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('contact_id', models.IntegerField()),
                ('disabled', models.BooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'disciplinary_actions',
            },
        ),
        migrations.CreateModel(
            name='DisciplinaryActionArea',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'disciplinary_action_areas',
            },
        ),
        migrations.CreateModel(
            name='DisciplinaryActionAreasDisciplinaryAction',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('disciplinary_action_id', models.IntegerField(blank=True, null=True)),
                ('disciplinary_action_area_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'disciplinary_action_areas_disciplinary_actions',
            },
        ),
        migrations.CreateModel(
            name='DiscountName',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('available', models.NullBooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'discount_names',
            },
        ),
        migrations.CreateModel(
            name='DiscountPercentage',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('percentage', models.IntegerField(blank=True, null=True)),
                ('available', models.NullBooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'discount_percentages',
            },
        ),
        migrations.CreateModel(
            name='DisktestBatch',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('finalized_on', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'disktest_batches',
            },
        ),
        migrations.CreateModel(
            name='DisktestBatchDrive',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('serial_number', models.CharField(max_length=255)),
                ('system_serial_number', models.CharField(max_length=255, blank=True, null=True)),
                ('destroyed_at', models.DateTimeField(blank=True, null=True)),
                ('disktest_run_id', models.IntegerField(blank=True, null=True)),
                ('disktest_batch_id', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'disktest_batch_drives',
            },
        ),
        migrations.CreateModel(
            name='DisktestRun',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('vendor', models.CharField(max_length=255, blank=True, null=True)),
                ('model', models.CharField(max_length=255, blank=True, null=True)),
                ('serial_number', models.CharField(max_length=255, blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('result', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('megabytes_size', models.IntegerField(blank=True, null=True)),
                ('bus_type', models.CharField(max_length=255, blank=True, null=True)),
                ('failure_details', models.CharField(max_length=255, blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('log', models.TextField(blank=True, null=True)),
                ('form_factor', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'disktest_runs',
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('postal_code', models.CharField(max_length=25, blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('reported_required_fee_cents', models.IntegerField(blank=True, null=True)),
                ('reported_suggested_fee_cents', models.IntegerField(blank=True, null=True)),
                ('needs_attention', models.BooleanField()),
                ('invoice_resolved_at', models.DateTimeField(blank=True, null=True)),
                ('contract_id', models.IntegerField()),
                ('adjustment', models.BooleanField()),
                ('occurred_at', models.DateTimeField()),
                ('is_pickup', models.BooleanField()),
                ('reported_resolved_invoices_cents', models.IntegerField()),
                ('reported_recycling_fees_cents', models.IntegerField()),
                ('reported_pickup_fees_cents', models.IntegerField()),
                ('reported_education_fees_cents', models.IntegerField()),
                ('reported_tech_support_fees_cents', models.IntegerField()),
                ('reported_other_fees_cents', models.IntegerField()),
            ],
            options={
                'db_table': 'donations',
            },
        ),
        migrations.CreateModel(
            name='EngineSchemaInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('engine_name', models.CharField(max_length=255, blank=True, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'engine_schema_info',
            },
        ),
        migrations.CreateModel(
            name='FGUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('login', models.CharField(max_length=255, blank=True, null=True)),
                ('email', models.CharField(max_length=255, blank=True, null=True)),
                ('crypted_password', models.CharField(max_length=40, blank=True, null=True)),
                ('salt', models.CharField(max_length=40, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('remember_token', models.CharField(max_length=255, blank=True, null=True)),
                ('remember_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('cashier_code', models.IntegerField(blank=True, null=True)),
                ('can_login', models.BooleanField()),
                ('last_logged_in', models.DateField(blank=True, null=True)),
                ('shared', models.BooleanField()),
                ('reason_cannot_login', models.CharField(max_length=255, blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, db_column='created_by', related_name='created_by_users_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_users_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Generic',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('value', models.CharField(max_length=100)),
                ('only_serial', models.BooleanField()),
                ('usable', models.BooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'generics',
            },
        ),
        migrations.CreateModel(
            name='GizmoCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'gizmo_categories',
            },
        ),
        migrations.CreateModel(
            name='GizmoContext',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'gizmo_contexts',
            },
        ),
        migrations.CreateModel(
            name='GizmoContextsGizmoType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('gizmo_context_id', models.IntegerField()),
                ('gizmo_type_id', models.IntegerField()),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gizmo_contexts_gizmo_types',
            },
        ),
        migrations.CreateModel(
            name='GizmoEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('donation_id', models.IntegerField(blank=True, null=True)),
                ('sale_id', models.IntegerField(blank=True, null=True)),
                ('disbursement_id', models.IntegerField(blank=True, null=True)),
                ('recycling_id', models.IntegerField(blank=True, null=True)),
                ('gizmo_type_id', models.IntegerField()),
                ('gizmo_context_id', models.IntegerField()),
                ('gizmo_count', models.IntegerField()),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('occurred_at', models.DateTimeField(blank=True, null=True)),
                ('unit_price_cents', models.IntegerField(blank=True, null=True)),
                ('as_is', models.NullBooleanField()),
                ('description', models.TextField(blank=True, null=True)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('recycling_contract_id', models.IntegerField(blank=True, null=True)),
                ('covered', models.NullBooleanField()),
                ('gizmo_return_id', models.IntegerField(blank=True, null=True)),
                ('reason', models.CharField(max_length=255, blank=True, null=True)),
                ('tester', models.CharField(max_length=255, blank=True, null=True)),
                ('return_sale_id', models.IntegerField(blank=True, null=True)),
                ('return_disbursement_id', models.IntegerField(blank=True, null=True)),
                ('invoice_donation_id', models.IntegerField(blank=True, null=True)),
                ('discount_percentage_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gizmo_events',
            },
        ),
        migrations.CreateModel(
            name='GizmoReturn',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('created_by', models.IntegerField(blank=True, null=True)),
                ('updated_by', models.IntegerField(blank=True, null=True)),
                ('storecredit_difference_cents', models.IntegerField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('adjustment', models.BooleanField()),
                ('occurred_at', models.DateTimeField()),
                ('postal_code', models.CharField(max_length=25, blank=True, null=True)),
                ('payment_method_id', models.IntegerField(blank=True, null=True)),
                ('cashier_created_by', models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_gizmoreturns_set', to='freegeek.FGUser')),
                ('cashier_updated_by', models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_gizmoreturns_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'gizmo_returns',
            },
        ),
        migrations.CreateModel(
            name='GizmoType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('required_fee_cents', models.IntegerField()),
                ('suggested_fee_cents', models.IntegerField()),
                ('gizmo_category_id', models.IntegerField()),
                ('name', models.CharField(max_length=40)),
                ('covered', models.NullBooleanField()),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('effective_on', models.DateTimeField(blank=True, null=True)),
                ('ineffective_on', models.DateTimeField(blank=True, null=True)),
                ('parent_name', models.CharField(max_length=255, blank=True, null=True)),
                ('needs_id', models.BooleanField()),
                ('return_policy_id', models.IntegerField(blank=True, null=True)),
                ('not_discounted', models.BooleanField()),
                ('sales_limit', models.IntegerField(blank=True, null=True)),
                ('tax_value_for_2014_cents', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gizmo_types',
            },
        ),
        migrations.CreateModel(
            name='GizmoTypeGroup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gizmo_type_groups',
            },
        ),
        migrations.CreateModel(
            name='GizmoTypeGroupsGizmoType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('gizmo_type_id', models.IntegerField(blank=True, null=True)),
                ('gizmo_type_group_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gizmo_type_groups_gizmo_types',
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('holiday_date', models.DateField(blank=True, null=True)),
                ('is_all_day', models.NullBooleanField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('frequency_type_id', models.IntegerField(blank=True, null=True)),
                ('schedule_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'holidays',
            },
        ),
        migrations.CreateModel(
            name='IncomeStream',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'income_streams',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('income_stream_id', models.IntegerField(blank=True, null=True)),
                ('program_id', models.IntegerField(blank=True, null=True)),
                ('virtual', models.BooleanField()),
                ('effective_on', models.DateField(blank=True, null=True)),
                ('ineffective_on', models.DateField(blank=True, null=True)),
                ('offsite', models.BooleanField()),
                ('reason_cannot_log_hours', models.TextField(blank=True, null=True)),
                ('fully_covered', models.BooleanField()),
            ],
            options={
                'db_table': 'jobs',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('table_name', models.CharField(max_length=255, blank=True, null=True)),
                ('action', models.CharField(max_length=255, blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('thing_id', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('cashier_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logs',
            },
        ),
        migrations.CreateModel(
            name='Mailing',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=20, blank=True, null=True)),
                ('description', models.CharField(max_length=100)),
                ('created_by', models.IntegerField()),
                ('updated_by', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mailings',
            },
        ),
        migrations.CreateModel(
            name='MeetingMinder',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('meeting_id', models.IntegerField(blank=True, null=True)),
                ('days_before', models.IntegerField(blank=True, null=True)),
                ('recipient', models.CharField(max_length=255, blank=True, null=True)),
                ('subject', models.CharField(max_length=255, blank=True, null=True)),
                ('script', models.CharField(max_length=255, blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('hour', models.IntegerField()),
            ],
            options={
                'db_table': 'meeting_minders',
            },
        ),
        migrations.CreateModel(
            name='MeetingsWorker',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('meeting_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meetings_workers',
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('email', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'newsletter_subscribers',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'notes',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('donation_id', models.IntegerField(blank=True, null=True)),
                ('sale_id', models.IntegerField(blank=True, null=True)),
                ('payment_method_id', models.IntegerField()),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('amount_cents', models.IntegerField(blank=True, null=True)),
                ('coupon_details', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'payment_methods',
            },
        ),
        migrations.CreateModel(
            name='PayPeriod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pay_periods',
            },
        ),
        migrations.CreateModel(
            name='PluginSchemaInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('plugin_name', models.CharField(max_length=255, blank=True, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'plugin_schema_info',
            },
        ),
        migrations.CreateModel(
            name='PointsTrade',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('from_contact_id', models.IntegerField(blank=True, null=True)),
                ('to_contact_id', models.IntegerField(blank=True, null=True)),
                ('points', models.DecimalField(blank=True, null=True, max_digits=100, decimal_places=100)),
                ('created_by', models.IntegerField(blank=True, null=True)),
                ('updated_by', models.IntegerField(blank=True, null=True)),
                ('cashier_created_by', models.IntegerField(blank=True, null=True)),
                ('cashier_updated_by', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'points_trades',
            },
        ),
        migrations.CreateModel(
            name='PostalCode',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('postal_code', models.CharField(max_length=255, blank=True, null=True)),
                ('city', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'postal_codes',
            },
        ),
        migrations.CreateModel(
            name='PricingData',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('table_name', models.CharField(max_length=255, blank=True, null=True)),
                ('printme_value', models.CharField(max_length=255, blank=True, null=True)),
                ('lookup_type', models.CharField(max_length=255, blank=True, null=True)),
                ('lookup_value', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pricing_datas',
            },
        ),
        migrations.CreateModel(
            name='PricingTypesType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('pricing_type_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pricing_types_types',
            },
        ),
        migrations.CreateModel(
            name='Privilege',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('restrict', models.BooleanField()),
            ],
            options={
                'db_table': 'privileges',
            },
        ),
        migrations.CreateModel(
            name='PrivilegesRole',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('privilege_id', models.IntegerField(blank=True, null=True)),
                ('role_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'privileges_roles',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user_ptr', models.OneToOneField(primary_key=True, serialize=False, auto_created=True, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('title', models.CharField(max_length=4, default='MRS', choices=[('MR', 'Mr'), ('MRS', 'Mrs'), ('MISS', 'Miss'), ('MS', 'Ms'), ('DR', 'Dr'), ('PROF', 'Prof'), ('REV', 'Rev'), ('NONE', 'None')])),
                ('phone', models.CharField(max_length=20, blank=True, null=True, validators=[django.core.validators.RegexValidator(regex='[0-9][0-9 ]+', message='Not a valid phone number')])),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(max_length=1, default='F', choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')])),
                ('proficiency', models.CharField(max_length=40, default='L1', choices=[('L1', 'Level 1'), ('L2', 'Level 2'), ('L3', 'Level 3')])),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', freegeek.models.ProfileManager()),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('volunteer', models.BooleanField()),
                ('adoption_credit', models.BooleanField()),
            ],
            options={
                'db_table': 'programs',
            },
        ),
        migrations.CreateModel(
            name='Recycling',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('recycled_at', models.DateTimeField()),
                ('needs_attention', models.BooleanField()),
                ('created_by', models.IntegerField()),
                ('updated_by', models.IntegerField(blank=True, null=True)),
                ('adjustment', models.BooleanField()),
                ('cashier_created_by', models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_recyclings_set', to='freegeek.FGUser')),
                ('cashier_updated_by', models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_recyclings_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'recyclings',
            },
        ),
        migrations.CreateModel(
            name='RecyclingShipment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField()),
                ('bill_of_lading', models.CharField(max_length=255)),
                ('received_at', models.DateField()),
                ('resolved_at', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'recycling_shipments',
            },
        ),
        migrations.CreateModel(
            name='ReportLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('report_name', models.CharField(max_length=255, blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'report_logs',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'resources',
            },
        ),
        migrations.CreateModel(
            name='ResourcesVolunteerDefaultEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('resource_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('effective_at', models.DateField(blank=True, null=True)),
                ('ineffective_at', models.DateField(blank=True, null=True)),
                ('roster_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'resources_volunteer_default_events',
            },
        ),
        migrations.CreateModel(
            name='ResourcesVolunteerEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('resource_id', models.IntegerField(blank=True, null=True)),
                ('resources_volunteer_default_event_id', models.IntegerField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('roster_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'resources_volunteer_events',
            },
        ),
        migrations.CreateModel(
            name='ReturnPolicy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'return_policies',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=40, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='RolesFGUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('role_id', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'roles_FGUsers',
            },
        ),
        migrations.CreateModel(
            name='Roster',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.BooleanField()),
                ('limit_shift_signup_by_program', models.BooleanField()),
                ('contact_type_id', models.IntegerField(blank=True, null=True)),
                ('restrict_to_every_n_days', models.IntegerField(blank=True, null=True)),
                ('restrict_from_sked_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rosters',
            },
        ),
        migrations.CreateModel(
            name='RostersSked',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('sked_id', models.IntegerField(blank=True, null=True)),
                ('roster_id', models.IntegerField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rosters_skeds',
            },
        ),
        migrations.CreateModel(
            name='RrItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('rr_set_id', models.IntegerField(blank=True, null=True)),
                ('repeats_every', models.IntegerField(blank=True, null=True)),
                ('repeats_on', models.IntegerField(blank=True, null=True)),
                ('weekday_0', models.NullBooleanField()),
                ('weekday_1', models.NullBooleanField()),
                ('weekday_2', models.NullBooleanField()),
                ('weekday_3', models.NullBooleanField()),
                ('weekday_4', models.NullBooleanField()),
                ('weekday_5', models.NullBooleanField()),
                ('weekday_6', models.NullBooleanField()),
                ('day_of_month_final', models.NullBooleanField()),
                ('min_day_of_month', models.IntegerField(blank=True, null=True)),
                ('max_day_of_month', models.IntegerField(blank=True, null=True)),
                ('week_of_month_final', models.NullBooleanField()),
                ('week_of_month_1', models.NullBooleanField()),
                ('week_of_month_2', models.NullBooleanField()),
                ('week_of_month_3', models.NullBooleanField()),
                ('week_of_month_4', models.NullBooleanField()),
                ('week_of_month_5', models.NullBooleanField()),
                ('month_of_year_01', models.NullBooleanField()),
                ('month_of_year_02', models.NullBooleanField()),
                ('month_of_year_03', models.NullBooleanField()),
                ('month_of_year_04', models.NullBooleanField()),
                ('month_of_year_05', models.NullBooleanField()),
                ('month_of_year_06', models.NullBooleanField()),
                ('month_of_year_07', models.NullBooleanField()),
                ('month_of_year_08', models.NullBooleanField()),
                ('month_of_year_09', models.NullBooleanField()),
                ('month_of_year_11', models.NullBooleanField()),
                ('month_of_year_10', models.NullBooleanField()),
                ('month_of_year_12', models.NullBooleanField()),
            ],
            options={
                'db_table': 'rr_items',
            },
        ),
        migrations.CreateModel(
            name='RrSet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('ineffective_date', models.DateField(blank=True, null=True)),
                ('match_mode', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rr_sets',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('postal_code', models.CharField(max_length=25, blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('reported_discount_amount_cents', models.IntegerField(blank=True, null=True)),
                ('reported_amount_due_cents', models.IntegerField(blank=True, null=True)),
                ('needs_attention', models.BooleanField()),
                ('invoice_resolved_at', models.DateTimeField(blank=True, null=True)),
                ('adjustment', models.BooleanField()),
                ('occurred_at', models.DateTimeField()),
                ('sale_type_id', models.IntegerField()),
                ('discount_name_id', models.IntegerField()),
                ('discount_percentage_id', models.IntegerField()),
                ('amount_real_money_paid_cents', models.IntegerField(blank=True, null=True)),
                ('cashier_created_by', models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_sales_set', to='freegeek.FGUser')),
                ('cashier_updated_by', models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_sales_set', to='freegeek.FGUser')),
                ('created_by', models.ForeignKey(db_column='created_by', related_name='created_by_sales_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_sales_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'sales',
            },
        ),
        migrations.CreateModel(
            name='SaleType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sale_types',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('ineffective_date', models.DateField(blank=True, null=True)),
                ('repeats_every', models.IntegerField(blank=True, null=True)),
                ('repeats_on', models.IntegerField(blank=True, null=True)),
                ('generate_from', models.BooleanField()),
                ('reference_from', models.BooleanField()),
            ],
            options={
                'db_table': 'schedules',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('session_id', models.CharField(max_length=255)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sessions',
            },
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('type', models.CharField(max_length=255, blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('meeting_name', models.CharField(max_length=255, blank=True, null=True)),
                ('shift_date', models.DateField(blank=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('ineffective_date', models.DateField(blank=True, null=True)),
                ('all_day', models.NullBooleanField()),
                ('repeats_every', models.IntegerField(blank=True, null=True)),
                ('repeats_on', models.IntegerField(blank=True, null=True)),
                ('frequency_type_id', models.IntegerField(blank=True, null=True)),
                ('job_id', models.IntegerField(blank=True, null=True)),
                ('meeting_id', models.IntegerField(blank=True, null=True)),
                ('schedule_id', models.IntegerField(blank=True, null=True)),
                ('actual', models.NullBooleanField()),
                ('training', models.NullBooleanField()),
                ('proposed', models.BooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('week_1_of_month', models.BooleanField()),
                ('week_2_of_month', models.BooleanField()),
                ('week_3_of_month', models.BooleanField()),
                ('week_4_of_month', models.BooleanField()),
                ('week_5_of_month', models.BooleanField()),
                ('offsite', models.BooleanField()),
                ('repeats_every_months', models.IntegerField()),
                ('repeats_on_months', models.IntegerField()),
                ('week', models.CharField(max_length=1, blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, db_column='created_by', related_name='shift_created_by_user', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='shift_updated_by_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'shifts',
            },
        ),
        migrations.CreateModel(
            name='Sked',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('category_type', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'skeds',
            },
        ),
        migrations.CreateModel(
            name='SkedjulnatorAccess',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'skedjulnator_accesses',
            },
        ),
        migrations.CreateModel(
            name='SpecSheet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('old_id', models.IntegerField(blank=True, null=True)),
                ('os', models.CharField(max_length=255, blank=True, null=True)),
                ('flag', models.NullBooleanField()),
                ('cleaned_output', models.TextField(blank=True, null=True)),
                ('original_output', models.TextField(blank=True, null=True)),
                ('cleaned_valid', models.NullBooleanField()),
                ('original_valid', models.NullBooleanField()),
                ('builder_task_id', models.IntegerField()),
            ],
            options={
                'db_table': 'spec_sheets',
            },
        ),
        migrations.CreateModel(
            name='SpecSheetQuestion',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('question', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('position', models.IntegerField()),
            ],
            options={
                'db_table': 'spec_sheet_questions',
            },
        ),
        migrations.CreateModel(
            name='SpecSheetQuestionCondition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('spec_sheet_question_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('operator', models.CharField(max_length=255, blank=True, null=True)),
                ('expected_value', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'spec_sheet_question_conditions',
            },
        ),
        migrations.CreateModel(
            name='SpecSheetValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('spec_sheet_question_id', models.IntegerField(blank=True, null=True)),
                ('value', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('spec_sheet', models.ForeignKey(blank=True, null=True, to='freegeek.SpecSheet')),
            ],
            options={
                'db_table': 'spec_sheet_values',
            },
        ),
        migrations.CreateModel(
            name='StandardShift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('job_id', models.IntegerField(blank=True, null=True)),
                ('meeting_id', models.IntegerField(blank=True, null=True)),
                ('schedule_id', models.IntegerField(blank=True, null=True)),
                ('shift_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'standard_shifts',
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=200)),
                ('location', models.ForeignKey(to='freegeek.Location')),
            ],
        ),
        migrations.CreateModel(
            name='StoreCredit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('gizmo_return_id', models.IntegerField(blank=True, null=True)),
                ('gizmo_event_id', models.IntegerField(blank=True, null=True)),
                ('payment_id', models.IntegerField(blank=True, null=True)),
                ('amount_cents', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('expire_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'store_credits',
            },
        ),
        migrations.CreateModel(
            name='StorePricing',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('gizmo_type_id', models.IntegerField(blank=True, null=True)),
                ('unit_price_cents', models.IntegerField(blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'store_pricings',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('system_vendor', models.CharField(max_length=255, blank=True, null=True)),
                ('system_model', models.CharField(max_length=255, blank=True, null=True)),
                ('system_serial_number', models.CharField(max_length=255, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('mobo_vendor', models.CharField(max_length=255, blank=True, null=True)),
                ('mobo_model', models.CharField(max_length=255, blank=True, null=True)),
                ('mobo_serial_number', models.CharField(max_length=255, blank=True, null=True)),
                ('serial_number', models.CharField(max_length=255, blank=True, null=True)),
                ('vendor', models.CharField(max_length=255, blank=True, null=True)),
                ('model', models.CharField(max_length=255, blank=True, null=True)),
                ('contract_id', models.IntegerField()),
                ('covered', models.NullBooleanField()),
                ('bug_correction', models.CharField(max_length=255, blank=True, null=True)),
                ('l1_cache_total', models.CharField(max_length=255, blank=True, null=True)),
                ('l2_cache_total', models.CharField(max_length=255, blank=True, null=True)),
                ('l3_cache_total', models.CharField(max_length=255, blank=True, null=True)),
                ('processor_slot', models.CharField(max_length=255, blank=True, null=True)),
                ('processor_product', models.CharField(max_length=255, blank=True, null=True)),
                ('processor_speed', models.CharField(max_length=255, blank=True, null=True)),
                ('north_bridge', models.CharField(max_length=255, blank=True, null=True)),
                ('sixty_four_bit', models.NullBooleanField()),
                ('virtualization', models.NullBooleanField()),
                ('last_build', models.DateField(blank=True, null=True)),
                ('previous', models.ForeignKey(blank=True, null=True, to='freegeek.System')),
            ],
            options={
                'db_table': 'systems',
            },
        ),
        migrations.CreateModel(
            name='TechSupportNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, db_column='created_by', related_name='created_techsupportnotes_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_techsupportnotes_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'tech_support_notes',
            },
        ),
        migrations.CreateModel(
            name='TillAdjustment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('till_date', models.DateField(blank=True, null=True)),
                ('adjustment_cents', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'till_adjustments',
            },
        ),
        migrations.CreateModel(
            name='TillType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, unique=True, blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'till_types',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('gizmo_type_id', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField()),
                ('created_by', models.ForeignKey(db_column='created_by', related_name='created_by_types_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(db_column='updated_by', related_name='updated_by_types_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'types',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('role', models.ForeignKey(blank=True, null=True, to='freegeek.Role')),
                ('user', models.ForeignKey(blank=True, null=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'roles_users',
            },
        ),
        migrations.CreateModel(
            name='Vacation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('ineffective_date', models.DateField(blank=True, null=True)),
                ('is_all_day', models.NullBooleanField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, db_column='created_by', related_name='created_by_vacations_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_vacations_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'vacations',
            },
        ),
        migrations.CreateModel(
            name='VolunteerDefaultEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('weekday_id', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('week', models.CharField(max_length=1, blank=True, null=True)),
            ],
            options={
                'db_table': 'volunteer_default_events',
            },
        ),
        migrations.CreateModel(
            name='VolunteerDefaultShift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('slot_count', models.IntegerField(blank=True, null=True)),
                ('roster_id', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('class_credit', models.NullBooleanField()),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('program_id', models.IntegerField(blank=True, null=True)),
                ('not_numbered', models.BooleanField()),
                ('stuck_to_assignment', models.BooleanField()),
                ('effective_on', models.DateField(blank=True, null=True)),
                ('ineffective_on', models.DateField(blank=True, null=True)),
                ('volunteer_default_event', models.ForeignKey(null=True, to='freegeek.VolunteerDefaultEvent')),
            ],
            options={
                'db_table': 'volunteer_default_shifts',
            },
        ),
        migrations.CreateModel(
            name='VolunteerEvent',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('nowalkins', models.BooleanField()),
                ('volunteer_default_event', models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerDefaultEvent')),
            ],
            options={
                'db_table': 'volunteer_events',
            },
        ),
        migrations.CreateModel(
            name='VolunteerShift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('slot_number', models.IntegerField(blank=True, null=True)),
                ('roster_id', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('class_credit', models.NullBooleanField()),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('program_id', models.IntegerField(blank=True, null=True)),
                ('not_numbered', models.BooleanField()),
                ('stuck_to_assignment', models.BooleanField()),
                ('volunteer_default_shift', models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerDefaultShift')),
                ('volunteer_event', models.ForeignKey(to='freegeek.VolunteerEvent')),
            ],
            options={
                'db_table': 'volunteer_shifts',
            },
        ),
        migrations.CreateModel(
            name='VolunteerTask',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('community_service_type_id', models.IntegerField(blank=True, null=True)),
                ('date_performed', models.DateField(blank=True, null=True)),
                ('program_id', models.IntegerField()),
                ('cashier_created_by', models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_volunteertasks_set', to='freegeek.FGUser')),
                ('cashier_updated_by', models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_volunteertasks_set', to='freegeek.FGUser')),
                ('created_by', models.ForeignKey(db_column='created_by', related_name='created_by_volunteertasks_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_volunteertasks_set', to='freegeek.FGUser')),
            ],
            options={
                'db_table': 'volunteer_tasks',
            },
        ),
        migrations.CreateModel(
            name='VolunteerTaskType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100, blank=True, null=True)),
                ('hours_multiplier', models.DecimalField(max_digits=10, decimal_places=3)),
                ('instantiable', models.BooleanField()),
                ('lock_version', models.IntegerField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=40)),
                ('effective_on', models.DateTimeField(blank=True, null=True)),
                ('ineffective_on', models.DateTimeField(blank=True, null=True)),
                ('program_id', models.IntegerField()),
                ('adoption_credit', models.NullBooleanField()),
            ],
            options={
                'db_table': 'volunteer_task_types',
            },
        ),
        migrations.CreateModel(
            name='WarrantyLength',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('system_type', models.CharField(max_length=255)),
                ('box_source', models.CharField(max_length=255)),
                ('os_type', models.CharField(max_length=255, blank=True, null=True)),
                ('length', models.CharField(max_length=255)),
                ('effective_on', models.DateField(blank=True, null=True)),
                ('ineffective_on', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'warranty_lengths',
            },
        ),
        migrations.CreateModel(
            name='WcCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
                ('rate_cents', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'wc_categories',
            },
        ),
        migrations.CreateModel(
            name='Weekday',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('short_name', models.CharField(max_length=255, blank=True, null=True)),
                ('is_open', models.NullBooleanField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('open_time', models.TimeField()),
                ('close_time', models.TimeField()),
            ],
            options={
                'db_table': 'weekdays',
            },
        ),
        migrations.CreateModel(
            name='WorkedShift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('job_id', models.IntegerField(blank=True, null=True)),
                ('date_performed', models.DateField(blank=True, null=True)),
                ('duration', models.DecimalField(blank=True, null=True, max_digits=100, decimal_places=100)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('offsite', models.NullBooleanField()),
            ],
            options={
                'db_table': 'worked_shifts',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('standard_weekly_hours', models.FloatField(blank=True, null=True)),
                ('weekly_admin_hours', models.FloatField(blank=True, null=True)),
                ('contact_id', models.IntegerField(blank=True, null=True)),
                ('sunday', models.FloatField(blank=True, null=True)),
                ('monday', models.FloatField(blank=True, null=True)),
                ('tuesday', models.FloatField(blank=True, null=True)),
                ('wednesday', models.FloatField(blank=True, null=True)),
                ('thursday', models.FloatField(blank=True, null=True)),
                ('friday', models.FloatField(blank=True, null=True)),
                ('saturday', models.FloatField(blank=True, null=True)),
                ('salaried', models.NullBooleanField()),
                ('pto_rate', models.FloatField(blank=True, null=True)),
                ('floor_hours', models.FloatField(blank=True, null=True)),
                ('ceiling_hours', models.FloatField(blank=True, null=True)),
                ('virtual', models.BooleanField()),
            ],
            options={
                'db_table': 'workers',
            },
        ),
        migrations.CreateModel(
            name='WorkersWorkerType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('effective_on', models.DateField(blank=True, null=True)),
                ('ineffective_on', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('worker', models.ForeignKey(to='freegeek.Worker')),
            ],
            options={
                'db_table': 'workers_worker_types',
            },
        ),
        migrations.CreateModel(
            name='WorkerType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, blank=True, null=True)),
                ('description', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'worker_types',
            },
        ),
        migrations.CreateModel(
            name='WorkShift',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('kind', models.CharField(max_length=255)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('meeting_name', models.CharField(max_length=255, blank=True, null=True)),
                ('shift_date', models.DateField(blank=True, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('ineffective_date', models.DateField(blank=True, null=True)),
                ('all_day', models.NullBooleanField()),
                ('repeats_every', models.IntegerField(blank=True, null=True)),
                ('repeats_on', models.IntegerField(blank=True, null=True)),
                ('frequency_type_id', models.IntegerField(blank=True, null=True)),
                ('job_id', models.IntegerField(blank=True, null=True)),
                ('meeting_id', models.IntegerField(blank=True, null=True)),
                ('schedule_id', models.IntegerField(blank=True, null=True)),
                ('shift_id', models.IntegerField(blank=True, null=True)),
                ('actual', models.NullBooleanField()),
                ('training', models.NullBooleanField()),
                ('proposed', models.NullBooleanField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('offsite', models.BooleanField()),
                ('created_by', models.ForeignKey(blank=True, null=True, db_column='created_by', related_name='created_by_workshifts_set', to='freegeek.FGUser')),
                ('updated_by', models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_workshifts_set', to='freegeek.FGUser')),
                ('weekday', models.ForeignKey(blank=True, null=True, to='freegeek.Weekday')),
                ('worker', models.ForeignKey(blank=True, null=True, to='freegeek.Worker')),
            ],
            options={
                'db_table': 'work_shifts',
            },
        ),
        migrations.CreateModel(
            name='WorkShiftFootnote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'work_shift_footnotes',
            },
        ),
        migrations.AddField(
            model_name='workersworkertype',
            name='worker_type',
            field=models.ForeignKey(to='freegeek.WorkerType'),
        ),
        migrations.AddField(
            model_name='workedshift',
            name='worker',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Worker'),
        ),
        migrations.AddField(
            model_name='volunteertask',
            name='volunteer_task_type',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerTaskType'),
        ),
        migrations.AddField(
            model_name='volunteershift',
            name='volunteer_task_type',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerTaskType'),
        ),
        migrations.AddField(
            model_name='volunteerdefaultshift',
            name='volunteer_task_type',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerTaskType'),
        ),
        migrations.AddField(
            model_name='vacation',
            name='worker',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Worker'),
        ),
        migrations.AddField(
            model_name='tilladjustment',
            name='till_type',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.TillType'),
        ),
        migrations.AddField(
            model_name='storepricing',
            name='system',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.System'),
        ),
        migrations.AddField(
            model_name='standardshift',
            name='weekday',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Weekday'),
        ),
        migrations.AddField(
            model_name='standardshift',
            name='worker',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Worker'),
        ),
        migrations.AddField(
            model_name='specsheet',
            name='system',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.System'),
        ),
        migrations.AddField(
            model_name='specsheet',
            name='type',
            field=models.ForeignKey(to='freegeek.Type'),
        ),
        migrations.AddField(
            model_name='shift',
            name='weekday',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Weekday'),
        ),
        migrations.AddField(
            model_name='shift',
            name='worker',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Worker'),
        ),
        migrations.AddField(
            model_name='resourcesvolunteerevent',
            name='volunteer_event',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerEvent'),
        ),
        migrations.AddField(
            model_name='resourcesvolunteerdefaultevent',
            name='volunteer_default_event',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerDefaultEvent'),
        ),
        migrations.AddField(
            model_name='pricingtypestype',
            name='type',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Type'),
        ),
        migrations.AddField(
            model_name='note',
            name='system',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.System'),
        ),
        migrations.AddField(
            model_name='meetingsworker',
            name='worker',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Worker'),
        ),
        migrations.AddField(
            model_name='job',
            name='wc_category',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.WcCategory'),
        ),
        migrations.AddField(
            model_name='holiday',
            name='weekday',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.Weekday'),
        ),
        migrations.AddField(
            model_name='gizmoevent',
            name='return_store_credit',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.StoreCredit'),
        ),
        migrations.AddField(
            model_name='gizmoevent',
            name='store_pricing',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.StorePricing'),
        ),
        migrations.AddField(
            model_name='gizmoevent',
            name='system',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.System'),
        ),
        migrations.AddField(
            model_name='donation',
            name='cashier_created_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_donations_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='donation',
            name='cashier_updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_donations_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='donation',
            name='created_by',
            field=models.ForeignKey(db_column='created_by', related_name='created_by_donations_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='donation',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_donations_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disktestbatchdrive',
            name='user_destroyed_by',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disktestbatch',
            name='user_finalized_by',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disciplinaryaction',
            name='cashier_created_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_diciplinaryactions_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disciplinaryaction',
            name='cashier_updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_diciplinaryactions_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disciplinaryaction',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, db_column='created_by', related_name='created_by_diciplinaryactions_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disciplinaryaction',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_diciplinaryactions_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disbursement',
            name='cashier_created_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_by_disbursements_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='disbursement',
            name='cashier_updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_by_disbursements_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='defaultassignment',
            name='volunteer_default_shift',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerDefaultShift'),
        ),
        migrations.AddField(
            model_name='contact',
            name='cashier_created_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_created_by', related_name='cashier_created_contacts_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='contact',
            name='cashier_updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_updated_by', related_name='cashier_updated_contacts_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='contact',
            name='created_by',
            field=models.ForeignKey(db_column='created_by', related_name='created_by_contacts_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='contact',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, db_column='updated_by', related_name='updated_by_contacts_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='buildertask',
            name='cashier_signed_off_by',
            field=models.ForeignKey(blank=True, null=True, db_column='cashier_signed_off_by', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='volunteer_shift',
            field=models.ForeignKey(blank=True, null=True, to='freegeek.VolunteerShift'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='freegeek.Profile'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='station',
            field=models.ForeignKey(to='freegeek.Station'),
        ),
        migrations.AddField(
            model_name='action',
            name='created_by',
            field=models.ForeignKey(db_column='created_by', related_name='created_actions_set', to='freegeek.FGUser'),
        ),
        migrations.AddField(
            model_name='action',
            name='updated_by',
            field=models.ForeignKey(db_column='updated_by', related_name='updated_actions_set', to='freegeek.FGUser'),
        ),
    ]
